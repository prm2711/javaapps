package com.zilker.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Logger;

import java.sql.PreparedStatement;

import com.zilker.constant.Constants;
import com.zilker.dto.Match;
import com.zilker.utilities.ConnectionSetup;

public class UserValidation {
	private Logger logger = Logger.getLogger(UserValidation.class.getName());

	public boolean userValidate(String user,String pass) {
		Connection connection = null;
		ConnectionSetup conn = new ConnectionSetup();
		connection = conn.getConnection();
		Statement statement = null;
		ResultSet result = null;
		PreparedStatement prep = null;
		try {

			// Execute a query
			statement = connection.createStatement();

			prep = connection.prepareStatement(Constants.RETRIEVEUSER);
			prep.setInt(1, pid);
			prep.setInt(2, pid);
			result = prep.executeQuery();
			if (result == null) {
				logger.info("No record found.");
				return null;
			}
			while (result.next()) {
				tourid = result.getInt(1);
				play1id = result.getInt(2);
				play2id = result.getInt(3);
				winner = result.getInt(4);
				loser = result.getInt(5);
				status = result.getString(6);
				score = result.getString(7);
				Match match = new Match();
				match.setTourId(tourid);
				match.setPlay1Id(play1id);
				match.setPlay2Id(play2id);
				match.setWinner(winner);
				match.setLoser(loser);
				match.setStatus(status);
				match.setScore(score);
				matches.add(match);

			}

		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} finally {
			// finally block used to close resources

			conn.closeResult(result);
			conn.closePreparedStatement(prep);
			conn.closeStatement(statement);
			conn.closeConnection(connection);

		}
		return matches;
	}

	
}
